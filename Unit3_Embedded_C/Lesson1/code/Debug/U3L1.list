
U3L1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c4  080002cc  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c4  080002c4  000102cc  2**0
                  CONTENTS
  4 .ARM          00000000  080002c4  080002c4  000102cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c4  080002cc  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c4  080002c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a39  00000000  00000000  000102f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c9  00000000  00000000  00010d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  00010ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  00011008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  00011068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d2c  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000663  00000000  00000000  00012ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008103  00000000  00000000  0001343f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b542  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  0001b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002ac 	.word	0x080002ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002ac 	.word	0x080002ac

08000170 <Clock_Init>:
#define SET_BIT(reg,bit)    reg|=(1<<bit)
#define CLR_BIT(reg,bit)    reg&=(~(1<<bit))
#define TOG_BIT(reg,bit)    reg^=(1<<bit)
#define READ_BIT(reg,bit)    (reg&(1<<bit))>>bit

void Clock_Init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//RCC_APB2ENR |=(1<<2); //I/O port A clock enable
	SET_BIT(RCC_APB2ENR,2);
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <Clock_Init+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <Clock_Init+0x18>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40021018 	.word	0x40021018

0800018c <GPIO_A_INIT>:
void GPIO_A_INIT(){
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	// PIN 13 OUTPUT
	 GPIOA_CRH   &= 0xFF0FFFFF;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <GPIO_A_INIT+0x24>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <GPIO_A_INIT+0x24>)
 8000196:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800019a:	6013      	str	r3, [r2, #0]
	 GPIOA_CRH   |= 0x00200000;
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <GPIO_A_INIT+0x24>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <GPIO_A_INIT+0x24>)
 80001a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001a6:	6013      	str	r3, [r2, #0]
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	40010804 	.word	0x40010804

080001b4 <delay>:
void delay(unsigned int x){
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]

	unsigned int i ,j ;
	for(i=0; i<x; i++)
 80001bc:	2300      	movs	r3, #0
 80001be:	60fb      	str	r3, [r7, #12]
 80001c0:	e00b      	b.n	80001da <delay+0x26>
		for(j=0; j<256; j++);
 80001c2:	2300      	movs	r3, #0
 80001c4:	60bb      	str	r3, [r7, #8]
 80001c6:	e002      	b.n	80001ce <delay+0x1a>
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	3301      	adds	r3, #1
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	68bb      	ldr	r3, [r7, #8]
 80001d0:	2bff      	cmp	r3, #255	; 0xff
 80001d2:	d9f9      	bls.n	80001c8 <delay+0x14>
	for(i=0; i<x; i++)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	3301      	adds	r3, #1
 80001d8:	60fb      	str	r3, [r7, #12]
 80001da:	68fa      	ldr	r2, [r7, #12]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d3ef      	bcc.n	80001c2 <delay+0xe>
}
 80001e2:	bf00      	nop
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <main>:
int main(void)
 {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	Clock_Init();
 80001f0:	f7ff ffbe 	bl	8000170 <Clock_Init>
	GPIO_A_INIT();
 80001f4:	f7ff ffca 	bl	800018c <GPIO_A_INIT>
	while(1){

		TOG_BIT(GPIOA_ODR,13);
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <main+0x20>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <main+0x20>)
 80001fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000202:	6013      	str	r3, [r2, #0]
		delay(10);
 8000204:	200a      	movs	r0, #10
 8000206:	f7ff ffd5 	bl	80001b4 <delay>
		TOG_BIT(GPIOA_ODR,13);
 800020a:	e7f5      	b.n	80001f8 <main+0xc>
 800020c:	4001080c 	.word	0x4001080c

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 f811 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffd3 	bl	80001ec <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	080002cc 	.word	0x080002cc
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000001c 	.word	0x2000001c

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	2500      	movs	r5, #0
 8000268:	4e0c      	ldr	r6, [pc, #48]	; (800029c <__libc_init_array+0x38>)
 800026a:	4c0d      	ldr	r4, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026c:	1ba4      	subs	r4, r4, r6
 800026e:	10a4      	asrs	r4, r4, #2
 8000270:	42a5      	cmp	r5, r4
 8000272:	d109      	bne.n	8000288 <__libc_init_array+0x24>
 8000274:	f000 f81a 	bl	80002ac <_init>
 8000278:	2500      	movs	r5, #0
 800027a:	4e0a      	ldr	r6, [pc, #40]	; (80002a4 <__libc_init_array+0x40>)
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <__libc_init_array+0x44>)
 800027e:	1ba4      	subs	r4, r4, r6
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	42a5      	cmp	r5, r4
 8000284:	d105      	bne.n	8000292 <__libc_init_array+0x2e>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800028c:	4798      	blx	r3
 800028e:	3501      	adds	r5, #1
 8000290:	e7ee      	b.n	8000270 <__libc_init_array+0xc>
 8000292:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000296:	4798      	blx	r3
 8000298:	3501      	adds	r5, #1
 800029a:	e7f2      	b.n	8000282 <__libc_init_array+0x1e>
 800029c:	080002c4 	.word	0x080002c4
 80002a0:	080002c4 	.word	0x080002c4
 80002a4:	080002c4 	.word	0x080002c4
 80002a8:	080002c8 	.word	0x080002c8

080002ac <_init>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	bf00      	nop
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr

080002b8 <_fini>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr
