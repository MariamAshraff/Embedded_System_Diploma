
Drivers_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000040c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800053c  08000544  00010544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800053c  0800053c  00010544  2**0
                  CONTENTS
  4 .ARM          00000000  0800053c  0800053c  00010544  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800053c  08000544  00010544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800053c  0800053c  0001053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000540  08000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000544  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000544  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000198c  00000000  00000000  0001056d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000407  00000000  00000000  00011ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  00012300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00012810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001cf7  00000000  00000000  000128a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cf7  00000000  00000000  0001459f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007f15  00000000  00000000  00015296  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001d1ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001d228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000524 	.word	0x08000524

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000524 	.word	0x08000524

08000170 <Get_CRLH_Position>:
 *      Author: Mariam Ashraf
 */
#include "STM32F103C6_GPIO_DRIVER.h"
#include "math.h"
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
//	}
//	if (x < GPIO_PIN_8)
//		return  x;
//	else
//		return  (x-8);
	switch (PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 :
			return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01d      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_1 :
			return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01b      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_2 :
			return 8 ;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e019      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_3 :
			return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e017      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_4 :
			return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e015      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_5 :
			return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e013      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_6 :
			return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e011      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_7 :
			return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e00f      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_8 :
			return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00d      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_9 :
			return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00b      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_10 :
			return 8 ;
 8000212:	2308      	movs	r3, #8
 8000214:	e009      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_11 :
			return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e007      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_12 :
			return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e005      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_13 :
			return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e003      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_14 :
			return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e001      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
		case GPIO_PIN_15 :
			return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e7ff      	b.n	800022a <Get_CRLH_Position+0xba>
			break;
	}

}
 800022a:	4618      	mov	r0, r3
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <MCAL_GPIO_init>:
 * @param [in] 			 	-PinConfig pointer to a GPIO_PIN_CONFIG_t structure that contains
 * 						   	the configuration information for the specified GPIO PIN
 * @retval				 	-none
 * Note-					-none
 */
void MCAL_GPIO_init(GPIO_TypeDef *GPIOx, GPIO_PIN_CONFIG_t* PinConfig){
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	volatile uint32_t *ConfigRegister= NULL;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
	//Specify config register( CRL OR CRH )
	ConfigRegister=(PinConfig->GPIO_PinNumber <GPIO_PIN_8? &GPIOx->CRL : &GPIOx->CRH);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	2bff      	cmp	r3, #255	; 0xff
 800024c:	d801      	bhi.n	8000252 <MCAL_GPIO_init+0x1e>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	e001      	b.n	8000256 <MCAL_GPIO_init+0x22>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3304      	adds	r3, #4
 8000256:	60bb      	str	r3, [r7, #8]

	// clear CNF[1:0] MODE[1:0]
	*ConfigRegister&=~(0xf<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff87 	bl	8000170 <Get_CRLH_Position>
 8000262:	4603      	mov	r3, r0
 8000264:	461a      	mov	r2, r3
 8000266:	230f      	movs	r3, #15
 8000268:	4093      	lsls	r3, r2
 800026a:	43da      	mvns	r2, r3
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	401a      	ands	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]

	//check if mode is output
	if (PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD||PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP||PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD||PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP)
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	789b      	ldrb	r3, [r3, #2]
 800027a:	2b07      	cmp	r3, #7
 800027c:	d00b      	beq.n	8000296 <MCAL_GPIO_init+0x62>
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	2b06      	cmp	r3, #6
 8000284:	d007      	beq.n	8000296 <MCAL_GPIO_init+0x62>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	2b05      	cmp	r3, #5
 800028c:	d003      	beq.n	8000296 <MCAL_GPIO_init+0x62>
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	789b      	ldrb	r3, [r3, #2]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d10e      	bne.n	80002b4 <MCAL_GPIO_init+0x80>
	{
		//*ConfigRegister|=(PinConfig->GPIO_Output_Speed>>Get_CRLH_Position(PinConfig->GPIO_PinNumber));
		pin_config=((PinConfig->GPIO_Output_Speed | ((PinConfig->GPIO_MODE)- 4 << 2))&0x0f);
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	78db      	ldrb	r3, [r3, #3]
 800029a:	b25a      	sxtb	r2, r3
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	3b04      	subs	r3, #4
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	b25b      	sxtb	r3, r3
 80002a6:	4313      	orrs	r3, r2
 80002a8:	b25b      	sxtb	r3, r3
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e01e      	b.n	80002f2 <MCAL_GPIO_init+0xbe>
	}
	// if input
	else
	{
		pin_config=(((PinConfig->GPIO_MODE)<< 2)&0x0f);
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	789b      	ldrb	r3, [r3, #2]
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	73fb      	strb	r3, [r7, #15]
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d107      	bne.n	80002da <MCAL_GPIO_init+0xa6>
		{
			//Table 20. Port bit configuration table PxODR register 1
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	8812      	ldrh	r2, [r2, #0]
 80002d2:	431a      	orrs	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	e00b      	b.n	80002f2 <MCAL_GPIO_init+0xbe>
		}
		else if( PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD)
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	789b      	ldrb	r3, [r3, #2]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d107      	bne.n	80002f2 <MCAL_GPIO_init+0xbe>
		{
			//Table 20. Port bit configuration table PxODR register 0
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	8812      	ldrh	r2, [r2, #0]
 80002ea:	43d2      	mvns	r2, r2
 80002ec:	401a      	ands	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
		}

	}
	*ConfigRegister|=(pin_config<<Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80002f2:	7bfc      	ldrb	r4, [r7, #15]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff39 	bl	8000170 <Get_CRLH_Position>
 80002fe:	4603      	mov	r3, r0
 8000300:	fa04 f203 	lsl.w	r2, r4, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	431a      	orrs	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	bd90      	pop	{r4, r7, pc}

08000316 <MCAL_GPIO_ReadPin>:
 * @param [in] 			 -GPIOx : where x can be (A..D depend on device used) to select the GPIO peripheral
 * @param [in]			 -PinNumber set pin number according to @ref GPIO_PINS_define
 * @retval				 - the input PIN value (two values based on @ref GPIO_PIN_State)
 * Note                  - none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t PinNumber){
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
 800031e:	460b      	mov	r3, r1
 8000320:	807b      	strh	r3, [r7, #2]
	if (((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	887b      	ldrh	r3, [r7, #2]
 8000328:	4013      	ands	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MCAL_GPIO_ReadPin+0x1c>
	{
		return GPIO_PIN_SET;
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return GPIO_PIN_RESET;
 8000332:	2300      	movs	r3, #0
	}
}
 8000334:	4618      	mov	r0, r3
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr

0800033e <MCAL_GPIO_TogglePin>:
 * @retval				 - none
 * Note                  - none
 */

void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx,uint16_t PinNumber)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	460b      	mov	r3, r1
 8000348:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	68da      	ldr	r2, [r3, #12]
 800034e:	887b      	ldrh	r3, [r7, #2]
 8000350:	405a      	eors	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	60da      	str	r2, [r3, #12]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <delay>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "STM32F103C6_GPIO_DRIVER.h"

void delay(unsigned int x){
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	unsigned int i ,j ;
	for(i=0; i<x; i++)
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	e00b      	b.n	8000386 <delay+0x26>
		for(j=0; j<256; j++);
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	e002      	b.n	800037a <delay+0x1a>
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	3301      	adds	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	2bff      	cmp	r3, #255	; 0xff
 800037e:	d9f9      	bls.n	8000374 <delay+0x14>
	for(i=0; i<x; i++)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	429a      	cmp	r2, r3
 800038c:	d3ef      	bcc.n	800036e <delay+0xe>
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <Clock_Init>:


void Clock_Init()
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_ENABLE();
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <Clock_Init+0x24>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a06      	ldr	r2, [pc, #24]	; (80003bc <Clock_Init+0x24>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_ENABLE();
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <Clock_Init+0x24>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <Clock_Init+0x24>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]

}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <GPIO_Init>:

void GPIO_Init()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0

	//set port A pin 13 as input floating
	GPIO_PIN_CONFIG_t PinConfig;
	PinConfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80003c6:	2301      	movs	r3, #1
 80003c8:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_PinNumber=GPIO_PIN_13;
 80003ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ce:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PinConfig);
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4619      	mov	r1, r3
 80003d4:	4813      	ldr	r0, [pc, #76]	; (8000424 <GPIO_Init+0x64>)
 80003d6:	f7ff ff2d 	bl	8000234 <MCAL_GPIO_init>

	//set port A pin 1 as input floating
	PinConfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80003da:	2301      	movs	r3, #1
 80003dc:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 80003de:	2302      	movs	r3, #2
 80003e0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PinConfig);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	480f      	ldr	r0, [pc, #60]	; (8000424 <GPIO_Init+0x64>)
 80003e8:	f7ff ff24 	bl	8000234 <MCAL_GPIO_init>

	//set port B pin 1 as output mode (push-pull),max speed 10MHZ
	PinConfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003ec:	2304      	movs	r3, #4
 80003ee:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 80003f0:	2302      	movs	r3, #2
 80003f2:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80003f4:	2301      	movs	r3, #1
 80003f6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB, &PinConfig);
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	4619      	mov	r1, r3
 80003fc:	480a      	ldr	r0, [pc, #40]	; (8000428 <GPIO_Init+0x68>)
 80003fe:	f7ff ff19 	bl	8000234 <MCAL_GPIO_init>
	// set portB pin 13 as output mode(push-pull),max speed 10MHZ

	PinConfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000402:	2304      	movs	r3, #4
 8000404:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_PinNumber=GPIO_PIN_13;
 8000406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040a:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800040c:	2301      	movs	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB, &PinConfig);
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <GPIO_Init+0x68>)
 8000416:	f7ff ff0d 	bl	8000234 <MCAL_GPIO_init>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <main>:

int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	Clock_Init();
 8000430:	f7ff ffb2 	bl	8000398 <Clock_Init>
	GPIO_Init();
 8000434:	f7ff ffc4 	bl	80003c0 <GPIO_Init>

	while(1)
	{

		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)  //single pressing
 8000438:	2102      	movs	r1, #2
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <main+0x54>)
 800043c:	f7ff ff6b 	bl	8000316 <MCAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10b      	bne.n	800045e <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000446:	2102      	movs	r1, #2
 8000448:	480e      	ldr	r0, [pc, #56]	; (8000484 <main+0x58>)
 800044a:	f7ff ff78 	bl	800033e <MCAL_GPIO_TogglePin>

			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0);
 800044e:	bf00      	nop
 8000450:	2102      	movs	r1, #2
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <main+0x54>)
 8000454:	f7ff ff5f 	bl	8000316 <MCAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f8      	beq.n	8000450 <main+0x24>
		}
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)==1) //multi pressing
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <main+0x54>)
 8000464:	f7ff ff57 	bl	8000316 <MCAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b01      	cmp	r3, #1
 800046c:	d104      	bne.n	8000478 <main+0x4c>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800046e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <main+0x58>)
 8000474:	f7ff ff63 	bl	800033e <MCAL_GPIO_TogglePin>
		}
		delay(3);
 8000478:	2003      	movs	r0, #3
 800047a:	f7ff ff71 	bl	8000360 <delay>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)  //single pressing
 800047e:	e7db      	b.n	8000438 <main+0xc>
 8000480:	40010800 	.word	0x40010800
 8000484:	40010c00 	.word	0x40010c00

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800048c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f000 f811 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff ffb7 	bl	800042c <main>

080004be <LoopForever>:

LoopForever:
    b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004cc:	08000544 	.word	0x08000544
  ldr r2, =_sbss
 80004d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004d4:	2000001c 	.word	0x2000001c

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>
	...

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2500      	movs	r5, #0
 80004e0:	4e0c      	ldr	r6, [pc, #48]	; (8000514 <__libc_init_array+0x38>)
 80004e2:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <__libc_init_array+0x3c>)
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	42a5      	cmp	r5, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	f000 f81a 	bl	8000524 <_init>
 80004f0:	2500      	movs	r5, #0
 80004f2:	4e0a      	ldr	r6, [pc, #40]	; (800051c <__libc_init_array+0x40>)
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <__libc_init_array+0x44>)
 80004f6:	1ba4      	subs	r4, r4, r6
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	42a5      	cmp	r5, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000504:	4798      	blx	r3
 8000506:	3501      	adds	r5, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800050e:	4798      	blx	r3
 8000510:	3501      	adds	r5, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	0800053c 	.word	0x0800053c
 8000518:	0800053c 	.word	0x0800053c
 800051c:	0800053c 	.word	0x0800053c
 8000520:	08000540 	.word	0x08000540

08000524 <_init>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr

08000530 <_fini>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr
